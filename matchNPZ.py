#!/usr/bin/env python3

import os
import sys
import numpy as np
import argparse
import warnings


def main(args):
    # Load in the template .npz file and figure out its frequency range
    template = np.load(args.template)
    freqT = template['freq1'][...]
    template.close()
    print(f"Loaded template '{os.path.basename(args.template)}' with {freqT.size} channels of width {(freqT[1]-freqT[0])/1e3:.3f} kHz")
    print(f"-> Frequency range is {freqT[0]/1e6:.3f} MHz to {freqT[-1]/1e6:.3f} MHz")
    print("")
    
    # Loop over the input filenames to see if they can be trimmed or not
    i = 0
    tags = []
    args.filename.sort()
    for filename in args.filename:
        ## Skip things that seem to have already been trimmed
        if filename.find('vis2T') != -1:
            continue
            
        ## Figure out which scan/observation this corresponds to
        tag = os.path.basename(filename)
        tag = tag.split('-', 1)[0]
        
        ## Load in the .npz file and get its frequency range
        data = np.load(filename)
        freq = data['freq1'][...]
        
        ## Find the overlap with the template's frequency range and validate
        good = np.where((freq>=freqT[0]) & (freq<=freqT[-1]))[0]
        if len(good) != freqT.size:
            warnings.warn(f"Incompatible overlapping channel count: {len(good)} != {freqT.size}, skipping")
            continue
        elif freq[good[0]] != freqT[0] and freq[good[-1]] != freqT[-1]:
            warnings.warn(f"Incompatible overlapping frequencies: {freq[good[0]]/1e6:.3f} MHz != {freqT[0]/1e6:.3f} MHz or {freq[good[-1]]/1e6:.3f} MHz != {freqT[-1]/1e6:.3f} MHz, skipping")
            continue
        
        ## Report
        if tag not in tags:
            i = 0
            tags.append(tag)
            print(f"Loaded '{os.path.basename(filename)}' with {freq.size} channels of width {(freq[1]-freq[0])/1e3:.3f} kHz")
            print(f"-> Frequency range is {freq[0]/1e6:.3f} MHz to {freq[-1]/1e6:.3f} MHz")
            print(f"-> Downselecting to channels {good[0]} through {good[-1]}, inclusive")
        if i % 10 == 0:
            print(i)
        i += 1
        
        ## Load in all of the fields contained in the .npz file and trim as needed
        keys = {}
        for entry in data.files:
            keys[entry] = data[entry][...]
            if entry.startswith('freq') or entry.startswith('vis'):
                keys[entry] = keys[entry][...,good]
                
        ## Save
        outname = filename.replace('vis2', 'vis2T')
        outname = os.path.basename(outname)
        np.savez(outname, **keys)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Given a template .npz file generated by "the next generation of correlator", trim other .npz files to match the template\'s frequency range',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )
    parser.add_argument('template', type=str,
                        help='template .npz file to match the frequency range of')
    parser.add_argument('filename', type=str, nargs='+',
                        help='.npz files to trim')
    args = parser.parse_args()
    main(args)
