#include "Python.h"
#include <math.h>
#include <stdio.h>
#include <complex.h>
#include <fftw3.h>
#include <stdlib.h>

#ifdef _OPENMP
    #include <omp.h>
    
    // OpenMP scheduling method
    #ifndef OMP_SCHEDULER
    #define OMP_SCHEDULER static
    #endif
#endif

#include "numpy/arrayobject.h"
#include "numpy/npy_math.h"

#include "blas.h"

#include "py3_compat.h"


/*
 Load in FFTW wisdom.  Based on the read_wisdom function in PRESTO.
*/

void read_wisdom(char *filename, PyObject *m) {
    int status = 0;
    FILE *wisdomfile;
    
    wisdomfile = fopen(filename, "r");
    if( wisdomfile != NULL ) {
        status = fftwf_import_wisdom_from_file(wisdomfile);
        PyModule_AddObject(m, "useWisdom", PyBool_FromLong(status));
        fclose(wisdomfile);
    } else {
        PyModule_AddObject(m, "useWisdom", PyBool_FromLong(status));
    }
}

{%- if useWindow -%}
/*
  Holder for window function callback
*/

static PyObject *windowFunc = NULL;
{%- endif %}


/*
  Complex magnitude squared functions
*/

double cabs2(double complex z) {
    return creal(z)*creal(z) + cimag(z)*cimag(z);
}

float cabs2f(float complex z) {
    return crealf(z)*crealf(z) + cimagf(z)*cimagf(z);
}


/*
  Sinc function for use by the polyphase filter bank
*/

double sinc(double x) {
    if(x == 0.0) {
        return 1.0;
    } else {
        return sin(x*NPY_PI)/(x*NPY_PI);
    }
}

float sincf(float x) {
    if(x == 0.0) {
        return 1.0;
    } else {
        return sinf(x*NPY_PI)/(x*NPY_PI);
    }
}


/*
  Hanning window for use by the polyphase filter bank
*/

double hanning(double x) {
    return 0.5 - 0.5*cos(x);
    
}

float hanningf(float x) {
        return 0.5 - 0.5*cosf(x);
}


/*
  Hamming window for use by the polyphase filter bank
*/

double hamming(double x) {
    return 0.53836 - 0.46164*cos(x);
    
}

float hammingf(float x) {
        return 0.53836 - 0.46164*cosf(x);
}


/*
  Number of PFB taps to use
*/

#define PFB_NTAP 4


/*
  Function to compute the interger and fractional delays for a set of inputs
*/

long computeDelayComponents(PyArrayObject *delays, double SampleRate, long *fifo, double *frac) {
    long i, j;
    long fifoMax;
    double minDelay;
    
    // Set up a way to access the data
    double *a;
    a = (double *) PyArray_DATA(delays);
    
    // Find the minimum delay
    /*
    minDelay = 1e9;
    for(i=0; i<{{nStand}}; i++) {
        for(j=0; j<{{nChan}}; j++) {
            if( *(a + {{nChan}}*i + j) < minDelay ) {
                minDelay = *(a + {{nChan}}*i + j);
            }
        }
    }
    */
    minDelay = 0.0;
    
    // Compute the FIFO and fractional delays
    fifoMax = 0.0;
    for(i=0; i<{{nStand}}; i++) {
        *(fifo + i) = lround( (*(a + {{nChan}}*i + {{nChan}}/2) - minDelay) * SampleRate );
        if( *(fifo + i) > fifoMax) {
            fifoMax = *(fifo + i);
        }
        
        for(j=0; j<{{nChan}}; j++) {
            *(frac + {{nChan}}*i + j) = (*(a + {{nChan}}*i + j) - minDelay) - (double) *(fifo + i)/SampleRate;
        }
    }
    
    return fifoMax;
}

