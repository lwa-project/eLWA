static PyObject *cSpecS(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *signals, *signalsF;
    PyArrayObject *data, *dataF;

    long i, j, k;
    
    static char *kwlist[] = {"signals", NULL};
    if(!PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &signals)) {
        PyErr_Format(PyExc_RuntimeError, "Invalid parameters");
        return NULL;
    }

    // Bring the data into C and make it usable
    data = (PyArrayObject *) PyArray_ContiguousFromObject(signals, NPY_{{dtypeN}}, 2, 2);
    
    // Find out how large the output array needs to be and initialize it
    npy_intp dims[2];
    dims[0] = (npy_intp) {{nStand}};
    dims[1] = (npy_intp) {{nChan}};
    dataF = (PyArrayObject*) PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if(dataF == NULL) {
        PyErr_Format(PyExc_MemoryError, "Cannot create output array");
        Py_XDECREF(data);
        return NULL;
    }
    PyArray_FILLWBYTE(dataF, 0);
    
    // Create the FFTW plan                          
    float *inP, *in;                        
    float complex *outP, *out;                          
    inP = (float *) fftwf_malloc(sizeof(float) * 2*{{nChan}});
    outP = (float complex *) fftwf_malloc(sizeof(float complex) * {{nChan}});
    fftwf_plan p;
    p = fftwf_plan_dft_r2c_1d(2*{{nChan}}, inP, outP, FFTW_R2HC|FFTW_MEASURE);
    
    // Data indexing and access
    {{dtypeC}} *a;
    double *b;
    a = ({{dtypeC}} *) PyArray_DATA(data);
    b = (double *) PyArray_DATA(dataF);
    
    // Time-domain blanking control
    double cleanFactor;
    long nActFFT;
    
    #ifdef _OPENMP
        #pragma omp parallel default(shared) private(in, out, i, j, k, cleanFactor, nActFFT)
    #endif
    {
        in = (float *) fftwf_malloc(sizeof(float) * 2*{{nChan}});
        out = (float complex *) fftwf_malloc(sizeof(float complex) * {{nChan}});
        
        #ifdef _OPENMP
            #pragma omp for schedule(OMP_SCHEDULER)
        #endif
        for(i=0; i<{{nStand}}; i++) {
            nActFFT = 0;
            
            for(j=0; j<{{nFFT}}; j++) {
                cleanFactor = 1.0;
                
                for(k=0; k<2*{{nChan}}; k++) {
                    in[k] = (float) *(a + {{nSamps}}*i + 2*{{nChan}}*j/{{nOverlap}} + k);
                    
                    {%- if ClipLevel != 0 -%}
                    if( fabsf(in[k]) >= {{ClipLevel}} ) {
                        cleanFactor = 0.0;
                    }
                    {%- endif %}
                }
                
                fftwf_execute_dft_r2c(p, in, out);
                
                for(k=0; k<{{nChan}}; k++) {
                    *(b + {{nChan}}*i + k) += {% if ClipLevel != 0 %} cleanFactor* {% endif %}cabs2f(in[k]);
                }
                
                nActFFT += (long) cleanFactor;
            }
            
            // Scale FFTs
            blas_dscal({{nChan}}, 1.0/(2*{{nChan}}*nActFFT), (b + i*{{nChan}}), 1);
        }
        
        fftwf_free(in);
        fftwf_free(out);
    }
    fftwf_destroy_plan(p);
    fftwf_free(inP);
    fftwf_free(outP);
    
    Py_XDECREF(data);

    signalsF = Py_BuildValue("O", PyArray_Return(dataF));
    Py_XDECREF(dataF);

    return signalsF;
}

PyDoc_STRVAR(cSpec_doc, \
"Perform a series of Fourier transforms on real-valued data to get the PSD.\n\
\n\
Input arguments are:\n\
 * signals: 2-D numpy.{{dtype}} (stands by samples) array of data to FFT\n\
\n\
Outputs:\n\
 * psd: 2-D numpy.double (stands by channels) of PSD data\n\
");


static PyObject *cSpecF(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *signals, *signalsF;
    PyArrayObject *data, *dataF;

    long i, j, k;
    
    static char *kwlist[] = {"signals", NULL};
    if(!PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &signals)) {
        PyErr_Format(PyExc_RuntimeError, "Invalid parameters");
        return NULL;
    }

    // Bring the data into C and make it usable
    data = (PyArrayObject *) PyArray_ContiguousFromObject(signals, NPY_{{dtypeN}}, 2, 2);
    
    // Find out how large the output array needs to be and initialize it
    npy_intp dims[2];
    dims[0] = (npy_intp) {{nStand}};
    dims[1] = (npy_intp) {{nChan}};
    dataF = (PyArrayObject*) PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if(dataF == NULL) {
        PyErr_Format(PyExc_MemoryError, "Cannot create output array");
        Py_XDECREF(data);
        return NULL;
    }
    PyArray_FILLWBYTE(dataF, 0);
    
    // Create the FFTW plan                          
    float *inP, *in;                        
    float complex *outP, *out;                          
    inP = (float *) fftwf_malloc(sizeof(float) * 2*{{nChan}});
    outP = (float complex *) fftwf_malloc(sizeof(float complex) * {{nChan}});
    fftwf_plan p;
    p = fftwf_plan_dft_r2c_1d(2*{{nChan}}, inP, outP, FFTW_R2HC|FFTW_MEASURE);
    
    // Data indexing and access
    {{dtypeC}} *a;
    double *b;
    a = ({{dtypeC}} *) PyArray_DATA(data);
    b = (double *) PyArray_DATA(dataF);
    
    // Time-domain blanking control
    double cleanFactor, value;
    long *nActFFT;
    nActFFT = (long *) malloc(sizeof(long)*{{nStand}});
    memset(nActFFT, 0, sizeof(long)*{{nStand}});
    
    #ifdef _OPENMP
        #pragma omp parallel default(shared) private(in, out, i, j, k, cleanFactor, value)
    #endif
    {
        in = (float *) fftwf_malloc(sizeof(float) * 2*{{nChan}});
        out = (float complex *) fftwf_malloc(sizeof(float complex) * {{nChan}});
        
        #ifdef _OPENMP
            #pragma omp for schedule(OMP_SCHEDULER)
        #endif
        for(j=0; j<{{nFFT}}; j++) {
            for(i=0; i<{{nStand}}; i++) {
                cleanFactor = 1.0;
                
                for(k=0; k<2*{{nChan}}; k++) {
                    in[k] = (float) *(a + {{nSamps}}*i + 2*{{nChan}}*j/{{nOverlap}} + k);
                    
                    {%- if ClipLevel != 0 -%}
                    if( fabsf(in[k]) >= {{ClipLevel}} ) {
                        cleanFactor = 0.0;
                    }
                    {%- endif %}
                }
                
                fftwf_execute_dft_r2c(p, in, out);
                
                for(k=0; k<{{nChan}}; k++) {
                    value = {% if ClipLevel != 0 %} cleanFactor* {% endif %}cabs2f(in[k]);
                    #ifdef _OPENMP
                    #pragma omp atomic
                    #endif
                    *(b + {{nChan}}*i + k) += value;
                }
                
                #ifdef _OPENMP
                #pragma omp atomic
                #endif
                *(nActFFT + i) += (long) cleanFactor;
            }
        }
        
        fftwf_free(in);
        fftwf_free(out);
    }
    fftwf_destroy_plan(p);
    fftwf_free(inP);
    fftwf_free(outP);
    
    #ifdef _OPENMP
        #pragma omp parallel default(shared) private(i)
    #endif
    {
        #ifdef _OPENMP
            #pragma omp for schedule(OMP_SCHEDULER)
        #endif
        for(i=0; i<{{nStand}}; i++) {
            // Scale FFTs
            blas_dscal({{nChan}}, 1.0/(2*{{nChan}}**(nActFFT + i)), (b + i*{{nChan}}), 1);
        }
    }
    free(nActFFT);
    
    Py_XDECREF(data);

    signalsF = Py_BuildValue("O", PyArray_Return(dataF));
    Py_XDECREF(dataF);

    return signalsF;
}


static PyObject *cSpecL(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *signals, *signalsF;
    PyArrayObject *data, *dataF;

    long ij, i, j, k;
    
    static char *kwlist[] = {"signals", NULL};
    if(!PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &signals)) {
        PyErr_Format(PyExc_RuntimeError, "Invalid parameters");
        return NULL;
    }

    // Bring the data into C and make it usable
    data = (PyArrayObject *) PyArray_ContiguousFromObject(signals, NPY_{{dtypeN}}, 2, 2);
    
    // Find out how large the output array needs to be and initialize it
    npy_intp dims[2];
    dims[0] = (npy_intp) {{nStand}};
    dims[1] = (npy_intp) {{nChan}};
    dataF = (PyArrayObject*) PyArray_SimpleNew(2, dims, NPY_DOUBLE);
    if(dataF == NULL) {
        PyErr_Format(PyExc_MemoryError, "Cannot create output array");
        Py_XDECREF(data);
        return NULL;
    }
    PyArray_FILLWBYTE(dataF, 0);
    
    // Create the FFTW plan                          
    float *inP, *in;                        
    float complex *outP, *out;                          
    inP = (float *) fftwf_malloc(sizeof(float) * 2*{{nChan}});
    outP = (float complex *) fftwf_malloc(sizeof(float complex) * {{nChan}});
    fftwf_plan p;
    p = fftwf_plan_dft_r2c_1d(2*{{nChan}}, inP, outP, FFTW_R2HC|FFTW_MEASURE);
    
    // Data indexing and access
    {{dtypeC}} *a;
    double *b;
    a = ({{dtypeC}} *) PyArray_DATA(data);
    b = (double *) PyArray_DATA(dataF);
    
    // Time-domain blanking control
    double cleanFactor;
    long *nActFFT;
    nActFFT = (long *) malloc(sizeof(long)*{{nStand}});
    memset(nActFFT, 0, sizeof(long)*{{nStand}});
    
    // Thread locking
    #ifdef _OPENMP
    omp_lock_t locks[{{nStand}}];
    for(i=0; i<{{nStand}}; i++) {
        omp_init_lock(&locks[i]);
    }
    #endif
    
    #ifdef _OPENMP
        #pragma omp parallel default(shared) private(in, out, i, j, k, cleanFactor)
    #endif
    {
        in = (float *) fftwf_malloc(sizeof(float) * 2*{{nChan}});
        out = (float complex *) fftwf_malloc(sizeof(float complex) * {{nChan}});
        
        #ifdef _OPENMP
            #pragma omp for schedule(OMP_SCHEDULER)
        #endif
        for(ij=0; ij<{{nStand}}*{{nFFT}}; ij++) {
            i = ij / {{nFFT}};
            j = ij % {{nFFT}};
            
            cleanFactor = 1.0;
            
            for(k=0; k<2*{{nChan}}; k++) {
                in[k] = (float) *(a + {{nSamps}}*i + 2*{{nChan}}*j/{{nOverlap}} + k);
                
                {%- if ClipLevel != 0 -%}
                if( fabsf(in[k]) >= {{ClipLevel}} ) {
                    cleanFactor = 0.0;
                }
                {%- endif %}
            }
            
            fftwf_execute_dft_r2c(p, in, out);
            
            #ifdef _OPENMP
            omp_set_lock(&locks[i]);
            #endif
            
            for(k=0; k<{{nChan}}; k++) {
                *(b + {{nChan}}*i + k) += {% if ClipLevel != 0 %} cleanFactor* {% endif %}cabs2f(in[k]);
            }
            
            *(nActFFT + i) += (long) cleanFactor;
            
            #ifdef _OPENMP
            omp_unset_lock(&locks[i]);
            #endif
        }
        
        fftwf_free(in);
        fftwf_free(out);
    }
    fftwf_destroy_plan(p);
    fftwf_free(inP);
    fftwf_free(outP);
    
    #ifdef _OPENMP
        #pragma omp parallel default(shared) private(i)
    #endif
    {
        #ifdef _OPENMP
            #pragma omp for schedule(OMP_SCHEDULER)
        #endif
        for(i=0; i<{{nStand}}; i++) {
            // Scale FFTs
            blas_dscal({{nChan}}, 1.0/(2*{{nChan}}**(nActFFT + i)), (b + i*{{nChan}}), 1);
        }
    }
    free(nActFFT);
    
    Py_XDECREF(data);

    signalsF = Py_BuildValue("O", PyArray_Return(dataF));
    Py_XDECREF(dataF);

    return signalsF;
}


static PyObject *cFEngine(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *signals, *freqs, *delays, *signalsF;
    PyArrayObject *data, *freq, *delay, *dataF, *validF;
    double SampleRate = 196.0e6;

    long ij, i, j, k, nFFT;
    
    static char *kwlist[] = {"signals", "freqs", "delays", "sample_rate", NULL};
    if(!PyArg_ParseTupleAndKeywords(args, kwds, "OOO|d", kwlist, &signals, &freqs, &delays, &SampleRate)) {
        PyErr_Format(PyExc_RuntimeError, "Invalid parameters");
        return NULL;
    }

    // Bring the data into C and make it usable
    data = (PyArrayObject *) PyArray_ContiguousFromObject(signals, NPY_{{dtypeN}}, 2, 2);
    freq = (PyArrayObject *) PyArray_ContiguousFromObject(freqs, NPY_DOUBLE, 1, 1);
    delay = (PyArrayObject *) PyArray_ContiguousFromObject(delays, NPY_DOUBLE, 2, 2);
    
    // Check data dimensions
    if(PyArray_DIM(data, 0) != PyArray_DIM(delay, 0)) {
        PyErr_Format(PyExc_TypeError, "signals and delays have different stand counts");
        Py_XDECREF(data);
        Py_XDECREF(freq);
        Py_XDECREF(delay);
        return NULL;
    }
    
    if({{nChan}} != PyArray_DIM(freq, 0)) {
        PyErr_Format(PyExc_RuntimeError, "freqs has a different channel count than {{nChan}}");
        Py_XDECREF(data);
        Py_XDECREF(freq);
        Py_XDECREF(delay);
        return NULL;
    }
    
    if(PyArray_DIM(freq, 0) != PyArray_DIM(delay, 1)) {
        PyErr_Format(PyExc_TypeError, "freqs and delays have different channel counts");
        Py_XDECREF(data);
        Py_XDECREF(freq);
        Py_XDECREF(delay);
        return NULL;
    }
    
    // Compute the integer sample offset and the fractional sample delay for each stand
    long *fifo, fifoMax;
    double *frac;
    fifo = (long *) malloc({{nStand}}*sizeof(long));
    frac = (double *) malloc({{nStand}}*{{nChan}}*sizeof(double));
    if( fifo == NULL || frac == NULL ) {
        PyErr_Format(PyExc_MemoryError, "Cannot create fifo/fractional delay arrays");
        Py_XDECREF(data);
        Py_XDECREF(freq);
        Py_XDECREF(delay);
        return NULL;
    }
    fifoMax = computeDelayComponents(delay, SampleRate, fifo, frac);

    // Find out how large the output array needs to be and initialize it
    nFFT = ({{nSamps}} - fifoMax) / ((2*{{nChan}})/{{nOverlap}}) - (2*{{nChan}})/((2*{{nChan}})/{{nOverlap}}) + 1;
    npy_intp dims[3];
    dims[0] = (npy_intp) {{nStand}};
    dims[1] = (npy_intp) {{nChan}};
    dims[2] = (npy_intp) {{nFFT}};
    dataF = (PyArrayObject*) PyArray_SimpleNew(3, dims, NPY_COMPLEX64);
    if(dataF == NULL) {
        PyErr_Format(PyExc_MemoryError, "Cannot create output array");
        Py_XDECREF(data);
        Py_XDECREF(freq);
        Py_XDECREF(delay);
        free(frac);
        return NULL;
    }
    
    // Create an array to store whether or not the FFT window is valid (1) or not (0)
    npy_intp dimsV[2];
    dimsV[0] = (npy_intp) {{nStand}};
    dimsV[1] = (npy_intp) {{nFFT}};
    validF = (PyArrayObject*) PyArray_SimpleNew(2, dimsV, NPY_UINT8);
    if(validF == NULL) {
        PyErr_Format(PyExc_MemoryError, "Cannot create valid index array");
        Py_XDECREF(data);
        Py_XDECREF(freq);
        Py_XDECREF(delay);
        Py_XDECREF(dataF);
        free(frac);
        return NULL;
    }
    
    // Create the FFTW plan  
    float *inP, *in;                        
    float complex *outP, *out;                          
    inP = (float *) fftwf_malloc(sizeof(float) * 2*{{nChan}});
    outP = (float complex *) fftwf_malloc(sizeof(float complex) * {{nChan}});
    fftwf_plan p;
    p = fftwf_plan_dft_r2c_1d(2*{{nChan}}, inP, outP, FFTW_R2HC|FFTW_MEASURE);
    
    // Data indexing and access
    {{dtypeC}} *a;
    float complex *b;
    double *c;
    unsigned char *d;
    a = ({{dtypeC}} *) PyArray_DATA(data);
    b = (float complex *) PyArray_DATA(dataF);
    c = (double *) PyArray_DATA(freq);
    d = (unsigned char *) PyArray_DATA(validF);
    
    // Time-domain blanking control
    double cleanFactor;
    
    // Pre-compute the phase rotation and scaling factor
    float complex *rot;
    rot = (float complex *) malloc(sizeof(float complex) * {{nStand}}*{{nChan}});
    #ifdef _OPENMP
        #pragma omp parallel default(shared) private(i, j)
    #endif
    {
        #ifdef _OPENMP
            #pragma omp for schedule(OMP_SCHEDULER)
        #endif
        for(ij=0; ij<{{nStand}}*{{nChan}}; ij++) {
            i = ij / {{nChan}};
            j = ij % {{nChan}};
            *(rot + {{nChan}}*i + j)  = cexp(2*NPY_PI*_Complex_I * *(c + j) * *(frac + {{nChan}}*i + j));
            *(rot + {{nChan}}*i + j) *= cexp(2*NPY_PI*_Complex_I * *(c + 0) / SampleRate * *(fifo + i));
            *(rot + {{nChan}}*i + j) /= sqrt(2*{{nChan}});
        }
    }
    
    #ifdef _OPENMP
        #pragma omp parallel default(shared) private(in, out, i, j, k, cleanFactor)
    #endif
    {
        in = (float *) fftwf_malloc(sizeof(float) * 2*{{nChan}});
        out = (float complex *) fftwf_malloc(sizeof(float complex) * {{nChan}});
        
        #ifdef _OPENMP
            #pragma omp for schedule(OMP_SCHEDULER)
        #endif
        for(ij=0; ij<{{nStand}}*{{nFFT}}; ij++) {
            i = ij / {{nFFT}};
            j = ij % {{nFFT}};
            if(j >= nFFT) {
                for(k=0; k<{{nChan}}; k++) {
                    *(b + {{nChan}}*{{nFFT}}*i + {{nFFT}}*k + j)  = 0.0;
                }
                *(d + {{nFFT}}*i + j) = 0;
                continue;
            }
            
            cleanFactor = 1.0;
            
            for(k=0; k<2*{{nChan}}; k++) {
                in[k] = (float) *(a + *(fifo + i) + {{nSamps}}*i + 2*{{nChan}}*j/{{nOverlap}} + k);
                
                {%- if ClipLevel != 0 -%}
                if( fabsf(in[k]) >= {{ClipLevel}} ) {
                    cleanFactor = 0.0;
                }
                {%- endif %}
            }
            
            fftwf_execute_dft_r2c(p, in, out);
            
            for(k=0; k<{{nChan}}; k++) {
                *(b + {{nChan}}*{{nFFT}}*i + {{nFFT}}*k + j)  = {% if ClipLevel != 0 %} cleanFactor* {% endif %}out[k];
                *(b + {{nChan}}*{{nFFT}}*i + {{nFFT}}*k + j) *= *(rot + {{nChan}}*i + k);
            }
            
            *(d + {{nFFT}}*i + j) = (unsigned char) cleanFactor;
            
        }
        
        fftwf_free(in);
        fftwf_free(out);
    }
    free(rot);
    
    fftwf_destroy_plan(p);
    fftwf_free(inP);
    fftwf_free(outP);
    free(frac);
    free(fifo);

    Py_XDECREF(data);
    Py_XDECREF(freq);
    Py_XDECREF(delay);

    signalsF = Py_BuildValue("(OO)", PyArray_Return(dataF), PyArray_Return(validF));
    Py_XDECREF(dataF);
    Py_XDECREF(validF);

    return signalsF;
}

PyDoc_STRVAR(cFEngine_doc, \
"Perform a series of overlapped Fourier transforms on real-valued data using\n\
OpenMP.\n\
\n\
Input arguments are:\n\
 * signals: 2-D numpy.{{dtype}} (stands by samples) array of data to FFT\n\
 * frequency: 1-D numpy.double array of frequency values in Hz for the\n\
   FFT channels\n\
 * delays: 1-D numpy.double array of delays to apply to each stand\n\
\n\
Input keywords are:\n\
 * SampleRate: sample rate of the data (default=196e6)\n\
\n\
Outputs:\n\
 * fsignals: 3-D numpy.complex64 (stands by channels by FFT_set) of FFTd\n\
   data\n\
 * valid: 2-D numpy.uint8 (stands by FFT_set) of whether or not the FFT\n\
   set is valid (1) or not (0)\n\
");


static PyObject *cPFBEngine(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *signals, *freqs, *delays, *signalsF;
    PyArrayObject *data, *freq, *delay, *dataF, *validF;
    double SampleRate = 196.0e6;

    long ij, i, j, k, l, nFFT;
    
    static char *kwlist[] = {"signals", "freqs", "delays", "SampleRate", NULL};
    if(!PyArg_ParseTupleAndKeywords(args, kwds, "OOO|d", kwlist, &signals, &freqs, &delays, &SampleRate)) {
        PyErr_Format(PyExc_RuntimeError, "Invalid parameters");
        return NULL;
    }

    // Bring the data into C and make it usable
    data = (PyArrayObject *) PyArray_ContiguousFromObject(signals, NPY_{{dtypeN}}, 2, 2);
    freq = (PyArrayObject *) PyArray_ContiguousFromObject(freqs, NPY_DOUBLE, 1, 1);
    delay = (PyArrayObject *) PyArray_ContiguousFromObject(delays, NPY_DOUBLE, 2, 2);
    
    // Check data dimensions
    if(PyArray_DIM(data, 0) != PyArray_DIM(delay, 0)) {
        PyErr_Format(PyExc_TypeError, "signals and delays have different stand counts");
        Py_XDECREF(data);
        Py_XDECREF(freq);
        Py_XDECREF(delay);
        return NULL;
    }
    
    if({{nChan}} != PyArray_DIM(freq, 0)) {
        PyErr_Format(PyExc_RuntimeError, "freqs has a different channel count than {{nChan}}");
        Py_XDECREF(data);
        Py_XDECREF(freq);
        Py_XDECREF(delay);
        return NULL;
    }
    
    if(PyArray_DIM(freq, 0) != PyArray_DIM(delay, 1)) {
        PyErr_Format(PyExc_TypeError, "freqs and delays have different channel counts");
        Py_XDECREF(data);
        Py_XDECREF(freq);
        Py_XDECREF(delay);
        return NULL;
    }
    
    // Compute the integer sample offset and the fractional sample delay for each stand
    long *fifo, fifoMax;
    double *frac;
    fifo = (long *) malloc({{nStand}}*sizeof(long));
    frac = (double *) malloc({{nStand}}*{{nChan}}*sizeof(double));
    if( fifo == NULL || frac == NULL ) {
        PyErr_Format(PyExc_MemoryError, "Cannot create fifo/fractional delay arrays");
        Py_XDECREF(data);
        Py_XDECREF(freq);
        Py_XDECREF(delay);
        return NULL;
    }
    fifoMax = computeDelayComponents(delay, SampleRate, fifo, frac);

    // Find out how large the output array needs to be and initialize it
    nFFT = ({{nSamps}} - fifoMax) / ((2*{{nChan}})/{{nOverlap}}) - (2*{{nChan}})/((2*{{nChan}})/{{nOverlap}}) + 1;
    npy_intp dims[3];
    dims[0] = (npy_intp) {{nStand}};
    dims[1] = (npy_intp) {{nChan}};
    dims[2] = (npy_intp) {{nFFT}};
    dataF = (PyArrayObject*) PyArray_SimpleNew(3, dims, NPY_COMPLEX64);
    if(dataF == NULL) {
        PyErr_Format(PyExc_MemoryError, "Cannot create output array");
        Py_XDECREF(data);
        Py_XDECREF(freq);
        Py_XDECREF(delay);
        free(frac);
        return NULL;
    }
    
    // Create an array to store whether or not the FFT window is valid (1) or not (0)
    npy_intp dimsV[2];
    dimsV[0] = (npy_intp) {{nStand}};
    dimsV[1] = (npy_intp) {{nFFT}};
    validF = (PyArrayObject*) PyArray_SimpleNew(2, dimsV, NPY_UINT8);
    if(validF == NULL) {
        PyErr_Format(PyExc_MemoryError, "Cannot create valid index array");
        Py_XDECREF(data);
        Py_XDECREF(freq);
        Py_XDECREF(delay);
        Py_XDECREF(dataF);
        free(frac);
        return NULL;
    }
    
    // Create the FFTW plan
    float *inP, *in;                        
    float complex *outP, *out;                          
    inP = (float *) fftwf_malloc(sizeof(float) * 2*{{nChan}}*PFB_NTAP);
    outP = (float complex *) fftwf_malloc(sizeof(float complex) * ({{nChan}}+1)*PFB_NTAP);
    fftwf_plan p;
    int n[] = {2*{{nChan}},};
    p = fftwf_plan_many_dft_r2c(1, n, PFB_NTAP, inP, NULL, 1, 2*{{nChan}}, outP, NULL, 1, {{nChan}}+1, FFTW_MEASURE);
    
    // Filter bank
    float *pfb;
    pfb = (float*) malloc(sizeof(float) * 2*{{nChan}}*PFB_NTAP);
    for(i=0; i<2*{{nChan}}*PFB_NTAP; i++) {
        *(pfb + i) = sincf((i - 2.0*{{nChan}}*PFB_NTAP/2.0 + 0.5)/(2.0*{{nChan}}));
        *(pfb + i) *= hammingf(2*NPY_PI*i/(2*{{nChan}}*PFB_NTAP));
    }
    
    // Data indexing and access
    {{dtypeC}} *a;
    float complex *b;
    double *c;
    unsigned char *d;
    a = ({{dtypeC}} *) PyArray_DATA(data);
    b = (float complex *) PyArray_DATA(dataF);
    c = (double *) PyArray_DATA(freq);
    d = (unsigned char *) PyArray_DATA(validF);
    
    // Time-domain blanking control
    double cleanFactor;
    
    // Pre-compute the phase rotation and scaling factor
    float complex *rot;
    rot = (float complex *) malloc(sizeof(float complex) * {{nStand}}*{{nChan}});
    #ifdef _OPENMP
        #pragma omp parallel default(shared) private(i, j)
    #endif
    {
        #ifdef _OPENMP
            #pragma omp for schedule(OMP_SCHEDULER)
        #endif
        for(ij=0; ij<{{nStand}}*{{nChan}}; ij++) {
            i = ij / {{nChan}};
            j = ij % {{nChan}};
            *(rot + {{nChan}}*i + j)  = cexp(2*NPY_PI*_Complex_I * *(c + j) * *(frac + {{nChan}}*i + j));
            *(rot + {{nChan}}*i + j) *= cexp(2*NPY_PI*_Complex_I * *(c + 0) / SampleRate * *(fifo + i));
            *(rot + {{nChan}}*i + j) /= sqrt(2*{{nChan}});
        }
    }
    
    #ifdef _OPENMP
        #pragma omp parallel default(shared) private(in, out, i, j, k, cleanFactor)
    #endif
    {
        in = (float *) fftwf_malloc(sizeof(float) * 2*{{nChan}}*PFB_NTAP);
        out = (float complex *) fftwf_malloc(sizeof(float complex) * ({{nChan}}+1)*PFB_NTAP);
        
        #ifdef _OPENMP
            #pragma omp for schedule(OMP_SCHEDULER)
        #endif
        for(ij=0; ij<{{nStand}}*{{nFFT}}; ij++) {
            i = ij / {{nFFT}};
            j = ij % {{nFFT}};
            if(j >= nFFT) {
                for(k=0; k<{{nChan}}; k++) {
                    *(b + {{nChan}}*{{nFFT}}*i + {{nFFT}}*k + j)  = 0.0;
                }
                *(d + {{nFFT}}*i + j) = 0;
                continue;
            }
            
            cleanFactor = 1.0;
            
            for(k=0; k<2*{{nChan}}*PFB_NTAP; k++) {
                if( *(fifo + i) + {{nSamps}}*i + 2*{{nChan}}*j/{{nOverlap}} - 2*{{nChan}}*(PFB_NTAP-1) + k < {{nSamps}}*i ) {
                    in[k] = 0.0;
                } else {
                    in[k] = (float) *(a + *(fifo + i) + {{nSamps}}*i + 2*{{nChan}}*j/{{nOverlap}} - 2*{{nChan}}*(PFB_NTAP-1) + k);
                }
                
                {%- if ClipLevel != 0 -%}
                if( fabsf(in[k]) >= {{ClipLevel}} ) {
                    cleanFactor = 0.0;
                }
                {%- endif %}
                
                in[k] *= *(pfb + k);
            }
            
            fftwf_execute_dft_r2c(p, in, out);
            
            for(l=1; l<PFB_NTAP; l++) {
                // Sum over the various FFT windows
                for(k=0; k<{{nChan}}; k++) {
                    out[k] += out[k+l*({{nChan}}+1)];
                }
            }
            
            for(k=0; k<{{nChan}}; k++) {
                *(b + {{nChan}}*{{nFFT}}*i + {{nFFT}}*k + j)  = {% if ClipLevel != 0 %} cleanFactor* {% endif %}out[k];
                *(b + {{nChan}}*{{nFFT}}*i + {{nFFT}}*k + j) *= *(rot + {{nChan}}*i + k);
            }
            
            *(d + {{nFFT}}*i + j) = (unsigned char) cleanFactor;
            
        }
        
        fftwf_free(in);
        fftwf_free(out);
    }
    free(rot);
    
    free(pfb);
    fftwf_destroy_plan(p);
    fftwf_free(inP);
    fftwf_free(outP);
    free(frac);
    free(fifo);

    Py_XDECREF(data);
    Py_XDECREF(freq);
    Py_XDECREF(delay);

    signalsF = Py_BuildValue("(OO)", PyArray_Return(dataF), PyArray_Return(validF));
    Py_XDECREF(dataF);
    Py_XDECREF(validF);

    return signalsF;
}

PyDoc_STRVAR(cPFBEngine_doc, \
"Perform a series of overlapped polyphase filter band transforms (4-tap plus a\n\
Hanning window) on real-valued data using OpenMP.\n\
\n\
Input arguments are:\n\
 * signals: 2-D numpy.{{dtype}} (stands by samples) array of data to FFT\n\
 * frequency: 1-D numpy.double array of frequency values in Hz for the\n\
   FFT channels\n\
 * delays: 1-D numpy.double array of delays to apply to each stand\n\
\n\
Input keywords are:\n\
 * SampleRate: sample rate of the data (default=196e6)\n\
\n\
Outputs:\n\
 * fsignals: 3-D numpy.complex64 (stands by channels by FFT_set) of FFTd\n\
   data\n\
 * valid: 2-D numpy.uint8 (stands by FFT_set) of whether or not the FFT\n\
   set is valid (1) or not (0)\n\
");
