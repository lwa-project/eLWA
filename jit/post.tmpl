/*
  Cross-Multiplication And Accumulation Function ("X Engines")
    1. XEngine2 - XMAC two collections of signals
*/

static PyObject *XEngine2(PyObject *self, PyObject *args) {
    PyObject *signals1, *signals2, *sigValid1, *sigValid2, *output;
    PyArrayObject *data1, *data2, *valid1, *valid2, *vis;
    
    if(!PyArg_ParseTuple(args, "OOOO", &signals1, &signals2, &sigValid1, &sigValid2)) {
        PyErr_Format(PyExc_RuntimeError, "Invalid parameters");
        return NULL;
    }

    // Bring the data into C and make it usable
    data1 = (PyArrayObject *) PyArray_ContiguousFromObject(signals1, NPY_COMPLEX64, 3, 3);
    data2 = (PyArrayObject *) PyArray_ContiguousFromObject(signals2, NPY_COMPLEX64, 3, 3);
    valid1 = (PyArrayObject *) PyArray_ContiguousFromObject(sigValid1, NPY_UINT8, 2, 2);
    valid2 = (PyArrayObject *) PyArray_ContiguousFromObject(sigValid2, NPY_UINT8, 2, 2);
    
    // Create the output visibility array and fill with zeros
    npy_intp dims[2];
    dims[0] = (npy_intp) {{nBL}};
    dims[1] = (npy_intp) {{nChan}};
    vis = (PyArrayObject*) PyArray_SimpleNew(2, dims, NPY_COMPLEX64);
    if(vis == NULL) {
        PyErr_Format(PyExc_MemoryError, "Cannot create output array");
        Py_XDECREF(data1);
        Py_XDECREF(data2);
        Py_XDECREF(valid1);
        Py_XDECREF(valid2);
        return NULL;
    }
    
    // Mapper for baseline number to stand 1, stand 2
    long s1, s2, mapper[{{nBL}}][2];
    long k = 0;
    for(s1=0; s1<{{nStand}}; s1++) {
        for(s2=s1; s2<{{nStand}}; s2++) {
            mapper[k][0] = s1;
            mapper[k++][1] = s2;
        }
    }
    
    // Cross-multiplication and accumulation
    long bl, c, f;
    float complex tempVis;
    float complex *a, *b, *v;
    a = (float complex *) PyArray_DATA(data1);
    b = (float complex *) PyArray_DATA(data2);
    v = (float complex *) PyArray_DATA(vis);
    
    // Time-domain blanking control
    long nActVis;
    unsigned char *u1, *u2;
    u1 = (unsigned char *) PyArray_DATA(valid1);
    u2 = (unsigned char *) PyArray_DATA(valid2);
    
    #ifdef _OPENMP
        #pragma omp parallel default(shared) private(s1, s2, c, f, nActVis, tempVis)
    #endif
    {
        #ifdef _OPENMP
            #pragma omp for schedule(OMP_SCHEDULER)
        #endif
        for(bl=0; bl<{{nBL}}; bl++) {
            s1 = mapper[bl][0];
            s2 = mapper[bl][1];
            
            nActVis = 0;
            for(f=0; f<{{nFFT}}; f++) {
                nActVis += (long) (*(u1 + {{nFFT}}*s1 + f) & *(u2 + {{nFFT}}*s2 + f));
            }
            
            for(c=0; c<{{nChan}}; c++) {
                blas_cdotc_sub({{nFFT}}, (b + {{nChan}}*{{nFFT}}*s2 + {{nFFT}}*c), 1, (a + {{nChan}}*{{nFFT}}*s1 + {{nFFT}}*c), 1, &tempVis);
                *(v + {{nChan}}*bl + c) = tempVis / nActVis;
            }
        }
    }
    Py_XDECREF(data1);
    Py_XDECREF(data2);
    Py_XDECREF(valid1);
    Py_XDECREF(valid2);

    output = Py_BuildValue("O", PyArray_Return(vis));
    Py_XDECREF(vis);

    return output;
}

PyDoc_STRVAR(XEngine2_doc, \
"Perform all XMACs for a data stream out of the F engine using OpenMP.\n\
\n\
Input arguments are:\n\
 * fsignals1: 3-D numpy.complex64 (stand by channels by FFT_set) array of FFTd\n\
   data from an F engine.\n\
 * fsignals2: 3-D numpy.complex64 (stand by channels by FFT_set) array of\n\
   FFTd data from an F engine.\n\
 * sigValid1: 1-D numpy.uint8 (FFT_set) array of whether or not the FFT_set is\n\
   valid (1) or not (0) for the first signal.\n\
 * sigValid2: 1-D numpy.uint8 (FFT_set) array of whether or not the FFT_set is\n\
   valid (1) or not (0) for the second signal.\n\
\n\
Ouputs:\n\
  * visibility: 2-D numpy.complex64 (baseline by channel) array of cross-\n\
    correlated and averaged visibility data.\n\
");


static PyObject *XEngine3(PyObject *self, PyObject *args) {
    PyObject *signalsX, *signalsY, *sigValidX, *sigValidY, *output;
    PyArrayObject *dataX, *dataY, *validX, *validY, *vis;
    
    if(!PyArg_ParseTuple(args, "OOOO", &signalsX, &signalsY, &sigValidX, &sigValidY)) {
        PyErr_Format(PyExc_RuntimeError, "Invalid parameters");
        return NULL;
    }
    
    // Bring the data into C and make it usable
    dataX = (PyArrayObject *) PyArray_ContiguousFromObject(signalsX, NPY_COMPLEX64, 3, 3);
    dataY = (PyArrayObject *) PyArray_ContiguousFromObject(signalsY, NPY_COMPLEX64, 3, 3);
    validX = (PyArrayObject *) PyArray_ContiguousFromObject(sigValidX, NPY_UINT8, 2, 2);
    validY = (PyArrayObject *) PyArray_ContiguousFromObject(sigValidY, NPY_UINT8, 2, 2);
    
    // Create the output visibility array and fill with zeros
    npy_intp dims[3];
    dims[0] = (npy_intp) 4;
    dims[1] = (npy_intp) {{nBL}};
    dims[2] = (npy_intp) {{nChan}};
    vis = (PyArrayObject*) PyArray_SimpleNew(3, dims, NPY_COMPLEX64);
    if(vis == NULL) {
        PyErr_Format(PyExc_MemoryError, "Cannot create output array");
        Py_XDECREF(dataX);
        Py_XDECREF(dataY);
        Py_XDECREF(validX);
        Py_XDECREF(validY);
        return NULL;
    }
    
    // Mapper for baseline number to stand 1, stand 2
    long s1, s2, mapper[{{nBL}}][2];
    long k = 0;
    for(s1=0; s1<{{nStand}}; s1++) {
        for(s2=s1; s2<{{nStand}}; s2++) {
            mapper[k][0] = s1;
            mapper[k++][1] = s2;
        }
    }
    
    // Cross-multiplication and accumulation
    long bl, c, f;
    float complex tempVis;
    float complex *a, *b, *v;
    a = (float complex *) PyArray_DATA(dataX);
    b = (float complex *) PyArray_DATA(dataY);
    v = (float complex *) PyArray_DATA(vis);
    
    // Time-domain blanking control
    long nActVisPureX, nActVisPureY, nActVisCross0, nActVisCross1;
    unsigned char *u1, *u2;
    u1 = (unsigned char *) PyArray_DATA(validX);
    u2 = (unsigned char *) PyArray_DATA(validY);
    
    #ifdef _OPENMP
        #pragma omp parallel default(shared) private(s1, s2, c, f, nActVisPureX, nActVisPureY, nActVisCross0, nActVisCross1, tempVis)
    #endif
    {
        #ifdef _OPENMP
            #pragma omp for schedule(OMP_SCHEDULER)
        #endif
        for(bl=0; bl<{{nBL}}; bl++) {
            s1 = mapper[bl][0];
            s2 = mapper[bl][1];
            
            nActVisPureX = 0;
            nActVisPureY = 0;
            nActVisCross0 = 0;
            nActVisCross1 = 0;
            for(f=0; f<{{nFFT}}; f++) {
                nActVisPureX  += (long) (*(u1 + {{nFFT}}*s1 + f) * *(u1 + {{nFFT}}*s2 + f));
                nActVisPureY  += (long) (*(u2 + {{nFFT}}*s1 + f) * *(u2 + {{nFFT}}*s2 + f));
                nActVisCross0 += (long) (*(u1 + {{nFFT}}*s1 + f) * *(u2 + {{nFFT}}*s2 + f));
                nActVisCross1 += (long) (*(u2 + {{nFFT}}*s1 + f) * *(u1 + {{nFFT}}*s2 + f));
            }
            
            for(c=0; c<{{nChan}}; c++) {
                // XX
                blas_cdotc_sub({{nFFT}}, (a + {{nChan}}*{{nFFT}}*s2 + {{nFFT}}*c), 1, (a + {{nChan}}*{{nFFT}}*s1 + {{nFFT}}*c), 1, &tempVis);
                *(v + 0*{{nBL}}*{{nChan}} + bl*{{nChan}} + c) = tempVis / nActVisPureX;
                
                // XY
                blas_cdotc_sub({{nFFT}}, (b + {{nChan}}*{{nFFT}}*s2 + {{nFFT}}*c), 1, (a + {{nChan}}*{{nFFT}}*s1 + {{nFFT}}*c), 1, &tempVis);
                *(v + 1*{{nBL}}*{{nChan}} + bl*{{nChan}} + c) = tempVis / nActVisCross0;
                
                // YX
                blas_cdotc_sub({{nFFT}}, (a + {{nChan}}*{{nFFT}}*s2 + {{nFFT}}*c), 1, (b + {{nChan}}*{{nFFT}}*s1 + {{nFFT}}*c), 1, &tempVis);
                *(v + 2*{{nBL}}*{{nChan}} + bl*{{nChan}} + c) = tempVis / nActVisCross1;
                
                // YY
                blas_cdotc_sub({{nFFT}}, (b + {{nChan}}*{{nFFT}}*s2 + {{nFFT}}*c), 1, (b + {{nChan}}*{{nFFT}}*s1 + {{nFFT}}*c), 1, &tempVis);
                *(v + 3*{{nBL}}*{{nChan}} + bl*{{nChan}} + c) = tempVis / nActVisPureY;
            }
        }
    }
    Py_XDECREF(dataX);
    Py_XDECREF(dataY);
    Py_XDECREF(validX);
    Py_XDECREF(validY);

    output = Py_BuildValue("O", PyArray_Return(vis));
    Py_XDECREF(vis);

    return output;
}

PyDoc_STRVAR(XEngine3_doc, \
"Perform all XMACs for a data stream out of the F engine using OpenMP that\n\
creates the four linear polarization products\n\
\n\
Input arguments are:\n\
 * fsignals1: 3-D numpy.cdouble (stand by channels by FFT_set) array of FFTd\n\
   data from an F engine.\n\
 * fsignals2: 3-D numpy.cdouble (stand by channels by FFT_set) array of FFTd\n\
   data from an F engine.\n\
 * sigValid1: 1-D numpy.uint8 (FFT_set) array of whether or not the FFT_set is\n\
   valid (1) or not (0) for the first signal.\n\
 * sigValid2: 1-D numpy.uint8 (FFT_set) array of whether or not the FFT_set is\n\
   valid (1) or not (0) for the second signal.\n\
\n\
Ouputs:\n\
  * visibility: 3-D numpy.cdouble (Stokes parameter (XX,XY,YX,YY) by baseline by\n\
  channel) array of cross-correlated and averaged visibility data.\n\
");


/*
  Module Setup - Function Definitions and Documentation
*/

static PyMethodDef cMethods[] = {
    {"specS",     (PyCFunction) cSpecS,     METH_VARARGS|METH_KEYWORDS, cSpec_doc     }, 
    {"specF",     (PyCFunction) cSpecF,     METH_VARARGS|METH_KEYWORDS, cSpec_doc     }, 
    {"specL",     (PyCFunction) cSpecL,     METH_VARARGS|METH_KEYWORDS, cSpec_doc     }, 
    {"FEngine",   (PyCFunction) cFEngine,   METH_VARARGS|METH_KEYWORDS, cFEngine_doc  }, 
    {"PFBEngine", (PyCFunction) cPFBEngine, METH_VARARGS|METH_KEYWORDS, cPFBEngine_doc},
    {"XEngine2",  (PyCFunction) XEngine2,   METH_VARARGS,               XEngine2_doc  }, 
    {"XEngine3",  (PyCFunction) XEngine3,   METH_VARARGS,               XEngine3_doc  }, 
    {NULL,        NULL,                     0,                          NULL          }
};

PyDoc_STRVAR(cDoc, \
"Optimized JIT C extension for numpy.{{dtype}} data that has {{nStand}} stands and {{nSamps}} samples.\n\
");



/*
  Module Setup - Initialization
*/

MOD_INIT({{module}}) {
    char filename[256];
    PyObject *m, *all, *pModule, *pDataPath;

    // Module definitions and functions
    MOD_DEF(m, "{{module}}", cMethods, cDoc);
    if( m == NULL ) {
        return MOD_ERROR_VAL;
    }
    import_array();
    
    // Function listings
	all = PyList_New(0);
	PyList_Append(all, PyString_FromString("specS"));
	PyList_Append(all, PyString_FromString("specF"));
	PyList_Append(all, PyString_FromString("specL"));
	PyList_Append(all, PyString_FromString("FEngine"));
	PyList_Append(all, PyString_FromString("PFBEngine"));
	PyList_Append(all, PyString_FromString("XEngine2"));
	PyList_Append(all, PyString_FromString("XEngine3"));
    PyModule_AddObject(m, "__all__", all);
    
    // LSL FFTW Wisdom
    pModule = PyImport_ImportModule("lsl.common.paths");
    if( pModule != NULL ) {
        pDataPath = PyObject_GetAttrString(pModule, "DATA");
        sprintf(filename, "%s/fftwf_wisdom.txt", PyString_AsString(pDataPath));
        read_wisdom(filename, m);
    } else {
        PyErr_Warn(PyExc_RuntimeWarning, "Cannot load the LSL FFTWF wisdom");
    }
    return MOD_SUCCESS_VAL(m);
}
